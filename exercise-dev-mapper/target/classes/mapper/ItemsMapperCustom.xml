<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.stanxu.mapper.ItemsMapperCustom" >
<!--  <resultMap id="commentsLevel" type="com.stanxu.pojo.vo.CommentsLevelVO" >-->
<!--    <result column="comment_level" property="commentLevel" jdbcType="INTEGER" />-->
<!--    <result column="content" property="content" jdbcType="VARCHAR" />-->
<!--    <result column="sepc_name" property="specName" jdbcType="VARCHAR" />-->
<!--    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" /> what's the correct type ?-->
<!--    <result column="nickname" property="nickname" jdbcType="VARCHAR" />-->
<!--    <result column="face" property="userFace" jdbcType="VARCHAR" /> what's the correct type ?-->
<!--  </resultMap>-->
  <select id="queryCommentsLevel" parameterType="Map" resultType="com.stanxu.pojo.vo.CommentsLevelVO">
    SELECT
      ic.comment_level as commentLevel,
      ic.content as content,
      ic.sepc_name as specName,
      ic.created_time as createdTime,
      u.nickname as nickname,
      u.face as userFace
    FROM items_comments ic
    LEFT JOIN users u
    on ic.user_id = u.id
    WHERE ic.item_id = #{paramsMap.itemId}
    <if test=" paramsMap.level != null and paramsMap.level != '' ">
      AND ic.comment_level = #{paramsMap.level}
    </if>
<!--    WHERE ic.item_id = 'cake-1001'-->
<!--    AND ic.comment_level = 1;-->
  </select>

  <select id="searchItems" parameterType="Map" resultType="com.stanxu.pojo.vo.SearchItemsVO">
    SELECT
      i.id as itemId,
      i.item_name as itemName,
      i.sell_counts as sellCounts,
      ii.url as imgUrl,
      tempSpec.price_discount as price
    FROM items i
    LEFT JOIN items_img ii
    ON i.id = ii.item_id
    LEFT JOIN
      (SELECT
      item_id, MIN(price_discount) as price_discount
      FROM items_spec
      GROUP BY item_id) tempSpec
    ON i.id = tempSpec.item_id
    WHERE ii.is_main = 1
    <if test=" paramsMap.keywords != null and paramsMap.keywords != '' ">
      AND i.item_name like '%${paramsMap.keywords}%'
    </if>
    ORDER BY
    <choose>
      <when test=" paramsMap.sort == &quot;c&quot; ">
        i.sell_counts DESC
      </when>
      <when test=" paramsMap.sort == &quot;p&quot; ">
        tempSpec.price_discount ASC
      </when>
      <otherwise>
        i.item_name ASC
      </otherwise>
    </choose>
  </select>

  <select id="searchItemsByThirdCat" parameterType="Map" resultType="com.stanxu.pojo.vo.SearchItemsVO">
    SELECT
    i.id as itemId,
    i.item_name as itemName,
    i.sell_counts as sellCounts,
    ii.url as imgUrl,
    tempSpec.price_discount as price
    FROM items i
    LEFT JOIN items_img ii
    ON i.id = ii.item_id
    LEFT JOIN
    (SELECT
    item_id, MIN(price_discount) as price_discount
    FROM items_spec
    GROUP BY item_id) tempSpec
    ON i.id = tempSpec.item_id
    WHERE ii.is_main = 1
    AND i.cat_id = #{paramsMap.catId}
    ORDER BY
    <choose>
      <when test=" paramsMap.sort == &quot;c&quot; ">
        i.sell_counts DESC
      </when>
      <when test=" paramsMap.sort == &quot;p&quot; ">
        tempSpec.price_discount ASC
      </when>
      <otherwise>
        i.item_name ASC
      </otherwise>
    </choose>
  </select>

  <select id="queryShopcartItemsBySpecIds" parameterType="List" resultType="com.stanxu.pojo.vo.ShopcartVO">
    SELECT
      i.id as itemId,
      i.item_name as itemName,
      isp.`name` as specName,
      isp.id as specId,
      isp.price_discount as priceDiscount,
      isp.price_normal as priceNormal,
      ii.url as itemImgUrl
    FROM items_spec isp
    LEFT JOIN
      items i
    ON i.id = isp.item_id
    LEFT JOIN
      items_img ii
    ON ii.item_id = i.id
    WHERE
      ii.is_main =1
    AND isp.id IN
      <foreach collection="paramsList" open="(" separator="," close=")" index="index" item="specId">
        #{specId}
      </foreach>
  </select>

  <!--    ('1','3','5');-->
  <!-- k: 默认，代表默认排序，根据name-->
  <!-- c: 根据销量排序-->
  <!-- p: 根据价格排序-->

  <update id="decreaseInventoryAfterOrderPlaced" >
    UPDATE
      items_spec
    SET
      stock = stock - #{pendingCounts}
    WHERE
      id = #{specId}
    AND
      stock >= #{pendingCounts}
  </update>


</mapper>